# ========================================
# MIRROR-LEECH TELEGRAM BOT CONFIGURATION
# ========================================
# Copy this file to config.py and fill in your values
# NEVER commit config.py to git!

# ========================================
# REQUIRED CONFIGURATION
# ========================================

# Telegram Bot Token from @BotFather
BOT_TOKEN = ""

# Your Telegram User ID (not username)
# Get it from @userinfobot
OWNER_ID = 0

# Telegram API credentials from https://my.telegram.org
TELEGRAM_API = 0
TELEGRAM_HASH = ""

# ========================================
# OPTIONAL CONFIGURATION
# ========================================

# Telegram Proxy (if needed)
# Example: {"scheme": "socks5", "hostname": "11.22.33.44", "port": 1234, "username": "user", "password": "pass"}
TG_PROXY = {}

# User Session String for premium features
# Generate with: python3 generate_string_session.py
USER_SESSION_STRING = ""

# Command suffix (e.g., "1" makes /mirror become /mirror1)
CMD_SUFFIX = ""

# Authorized chat IDs (space-separated)
# Format: chat_id or chat_id|thread_id
AUTHORIZED_CHATS = ""

# Sudo user IDs (space-separated)
SUDO_USERS = ""

# MongoDB Database URL
# Example: mongodb+srv://username:password@cluster.mongodb.net/?retryWrites=true&w=majority
DATABASE_URL = ""

# Status message settings
STATUS_LIMIT = 10
STATUS_UPDATE_INTERVAL = 15

# Default upload destination ("rc" for rclone, "gd" for Google Drive)
DEFAULT_UPLOAD = "rc"

# File extensions to exclude (space-separated, without dots)
EXCLUDED_EXTENSIONS = ""

# Notify about incomplete tasks after restart
INCOMPLETE_TASK_NOTIFIER = False

# yt-dlp options (Python dict format)
# Example: {"format": "bv*+ba/b", "writesubtitles": True}
YT_DLP_OPTIONS = ""

# Use Service Accounts for Google Drive
USE_SERVICE_ACCOUNTS = False

# Name substitution patterns
# Example: "word1/replacement1 | word2/replacement2"
NAME_SUBSTITUTE = ""

# FFmpeg commands (Python dict format)
FFMPEG_CMDS = {}

# Upload path shortcuts (Python dict format)
UPLOAD_PATHS = {}

# ========================================
# GOOGLE DRIVE CONFIGURATION
# ========================================

# Google Drive folder/TeamDrive ID or "root"
GDRIVE_ID = ""

# Is this a Team Drive?
IS_TEAM_DRIVE = False

# Stop duplicate uploads
STOP_DUPLICATE = False

# Index URL (if using Bhadoo Index)
INDEX_URL = ""

# ========================================
# RCLONE CONFIGURATION
# ========================================

# Default rclone upload path
# Example: "remote:folder"
RCLONE_PATH = ""

# Rclone flags
# Example: "--buffer-size=64M --transfers=4"
RCLONE_FLAGS = ""

# Rclone serve settings
RCLONE_SERVE_URL = ""
RCLONE_SERVE_PORT = 8080
RCLONE_SERVE_USER = ""
RCLONE_SERVE_PASS = ""

# ========================================
# JDOWNLOADER CONFIGURATION
# ========================================

# JDownloader MyJD credentials
JD_EMAIL = ""
JD_PASS = ""

# ========================================
# SABNZBD CONFIGURATION
# ========================================

# Usenet server configuration (Python list of dicts)
USENET_SERVERS = [
    {
        "name": "main",
        "host": "",
        "port": 563,
        "timeout": 60,
        "username": "",
        "password": "",
        "connections": 8,
        "ssl": 1,
        "ssl_verify": 2,
        "ssl_ciphers": "",
        "enable": 1,
        "required": 0,
        "optional": 0,
        "retention": 0,
        "send_group": 0,
        "priority": 0,
    }
]

# ========================================
# NZB SEARCH CONFIGURATION
# ========================================

# NZBHydra2 settings
HYDRA_IP = ""
HYDRA_API_KEY = ""

# ========================================
# UPDATE CONFIGURATION
# ========================================

# GitHub repository for updates
# Example: https://github.com/username/repo
UPSTREAM_REPO = ""
UPSTREAM_BRANCH = "master"

# ========================================
# LEECH CONFIGURATION
# ========================================

# Split size for Telegram uploads (in bytes)
# 0 = default (2GB for free, 4GB for premium)
LEECH_SPLIT_SIZE = 0

# Upload as document by default
AS_DOCUMENT = False

# Equal split sizes
EQUAL_SPLITS = False

# Group split files in media group
MEDIA_GROUP = False

# Use user session for upload/download
USER_TRANSMISSION = False

# Hybrid leech (mix bot and user session)
HYBRID_LEECH = False

# Filename prefix for leeched files
LEECH_FILENAME_PREFIX = ""

# Chat ID to upload files to
# Format: chat_id or chat_id|thread_id or "pm" or @username
LEECH_DUMP_CHAT = ""

# Thumbnail layout (e.g., "2x2", "3x3")
THUMBNAIL_LAYOUT = ""

# ========================================
# TORRENT/DOWNLOAD CONFIGURATION
# ========================================

# Torrent timeout in seconds
TORRENT_TIMEOUT = 0

# Base URL for web interface
# Example: http://your-ip or http://your-domain.com
BASE_URL = ""
BASE_URL_PORT = 80

# Require pincode for file selection
WEB_PINCODE = False

# ========================================
# QUEUE CONFIGURATION
# ========================================

# Maximum parallel tasks (download + upload)
QUEUE_ALL = 0

# Maximum parallel downloads
QUEUE_DOWNLOAD = 0

# Maximum parallel uploads
QUEUE_UPLOAD = 0

# ========================================
# RSS CONFIGURATION
# ========================================

# RSS refresh interval in seconds
RSS_DELAY = 600

# Chat ID for RSS notifications
RSS_CHAT = ""

# RSS item size limit in bytes
RSS_SIZE_LIMIT = 0

# ========================================
# TORRENT SEARCH CONFIGURATION
# ========================================

# Torrent search API link
SEARCH_API_LINK = ""

# Search result limit per site
SEARCH_LIMIT = 0

# qBittorrent search plugins (list of GitHub raw URLs)
SEARCH_PLUGINS = [
    "https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/piratebay.py",
    "https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/limetorrents.py",
]

# ========================================
# API KEYS
# ========================================

# Filelion API key
FILELION_API = ""

# Streamwish API key
STREAMWISH_API = ""

